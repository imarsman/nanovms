// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcpass

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XKCDServiceClient is the client API for XKCDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XKCDServiceClient interface {
	GetXKCD(ctx context.Context, in *MessageNumber, opts ...grpc.CallOption) (*Message, error)
}

type xKCDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXKCDServiceClient(cc grpc.ClientConnInterface) XKCDServiceClient {
	return &xKCDServiceClient{cc}
}

func (c *xKCDServiceClient) GetXKCD(ctx context.Context, in *MessageNumber, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/grpcpass.XKCDService/GetXKCD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XKCDServiceServer is the server API for XKCDService service.
// All implementations must embed UnimplementedXKCDServiceServer
// for forward compatibility
type XKCDServiceServer interface {
	GetXKCD(context.Context, *MessageNumber) (*Message, error)
	mustEmbedUnimplementedXKCDServiceServer()
}

// UnimplementedXKCDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXKCDServiceServer struct {
}

func (UnimplementedXKCDServiceServer) GetXKCD(context.Context, *MessageNumber) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXKCD not implemented")
}
func (UnimplementedXKCDServiceServer) mustEmbedUnimplementedXKCDServiceServer() {}

// UnsafeXKCDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XKCDServiceServer will
// result in compilation errors.
type UnsafeXKCDServiceServer interface {
	mustEmbedUnimplementedXKCDServiceServer()
}

func RegisterXKCDServiceServer(s grpc.ServiceRegistrar, srv XKCDServiceServer) {
	s.RegisterService(&XKCDService_ServiceDesc, srv)
}

func _XKCDService_GetXKCD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XKCDServiceServer).GetXKCD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcpass.XKCDService/GetXKCD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XKCDServiceServer).GetXKCD(ctx, req.(*MessageNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// XKCDService_ServiceDesc is the grpc.ServiceDesc for XKCDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XKCDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcpass.XKCDService",
	HandlerType: (*XKCDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetXKCD",
			Handler:    _XKCDService_GetXKCD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcpass/proto/grpcpass.proto",
}
